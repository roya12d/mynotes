window.requestAnimationFrame = window.requestAnimationFrame || function (callback) { window.setTimeout(callback, 16) }; $(document).ready(function () { $(".zoomer_b").wrap(' <div class="zoomer_wrapper zoomer_basic zoomer-element"></div>'); $(' <span class="zoomer-zoom-out">-</span><span class="zoomer-zoom-in">+</span>').insertAfter(".zoomer_b"); $(".zoomer_basic").zoomer() }); (function (e, t) { "use strict"; function f(t) { t = e.extend({}, o, u, t); s = F(); var n = e(this); for (var i = 0, a = n.length; i < a; i++) { l(n.eq(i), t) } r = e(".zoomer-element"); P(); return n } function l(t, n) { if (!t.data("zoomer")) { n = e.extend({}, n, t.data("zoomer-options")); n.$target = t; n.marginReal = n.marginMin * 2; n.originalDOM = n.$target.html(); if (n.$target.find("img").length > 0) { n.source = []; n.$target.find("img").each(function () { n.source.push(e(this).attr("src")) }); n.$target.empty() } n = D(n); var r = '<div class="zoomer ' + n.customClass + '">'; r += '<div class="zoomer-positioner">'; r += '<div class="zoomer-holder">'; r += "</div>"; r += "</div>"; r += "</div>"; n.$zoomer = e(r); n.$target.addClass("zoomer-element").html(n.$zoomer); if (n.controls.zoomIn || n.controls.zoomOut || n.controls.next || n.controls.previous) { n.controls.$zoomIn = e(n.controls.zoomIn); n.controls.$zoomOut = e(n.controls.zoomOut); n.controls.$next = e(n.controls.next); n.controls.$previous = e(n.controls.previous) } else { r = '<div class="zoomer-controls zoomer-controls-' + n.controls.position + '">'; r += '<span class="zoomer-previous">&lsaquo;</span>'; r += '<span class="zoomer-zoom-out">-</span>'; r += '<span class="zoomer-zoom-in">+</span>'; r += '<span class="zoomer-next">&rsaquo;</span>'; r += "</div>"; n.$zoomer.append(r); n.controls.$default = n.$zoomer.find(".zoomer-controls"); n.controls.$zoomIn = n.$zoomer.find(".zoomer-zoom-in"); n.controls.$zoomOut = n.$zoomer.find(".zoomer-zoom-out"); n.controls.$next = n.$zoomer.find(".zoomer-next"); n.controls.$previous = n.$zoomer.find(".zoomer-previous") } n.$positioner = n.$zoomer.find(".zoomer-positioner"); n.$holder = n.$zoomer.find(".zoomer-holder"); n.controls.$zoomIn.on("touchstart.zoomer mousedown.zoomer", n, E).on("touchend.zoomer mouseup.zoomer", n, x); n.controls.$zoomOut.on("touchstart.zoomer mousedown.zoomer", n, S).on("touchend.zoomer mouseup.zoomer", n, x); n.controls.$next.on("click.zoomer", n, b); n.controls.$previous.on("click.zoomer", n, w); n.$zoomer.on("mousedown.zoomer", n, C).on("touchstart.zoomer MSPointerDown.zoomer", ":not(.zoomer-controls)", n, A); n.$target.data("zoomer", n); a.resize.apply(n.$target); if (n.images.length > 0) { c.apply(n.$target, [n]) } } } function c(e) { if (e.gallery) { e.$zoomer.addClass("zoomer-gallery") } else { e.$zoomer.removeClass("zoomer-gallery") } if (typeof e.$image !== "undefined") { e.$holder.animate({ opacity: 0 }, 300, function () { a.unload.apply(e.$target); h.apply(e.$target, [e, e.images[e.index]]) }) } else { h.apply(e.$target, [e, e.images[e.index]]) } } function h(t, n) { t.loading = true; if (t.tiled) { t.tilesTotal = 0; t.tilesLoaded = 0; var r = '<div class="zoomer-tiles">'; for (var i in t.images[0]) { if (t.images[0].hasOwnProperty(i)) { for (var s in t.images[0][i]) { if (t.images[0][i].hasOwnProperty(s)) { r += '<img class="zoomer-image zoomer-tile" src="' + t.images[0][i][s] + '" data-zoomer-tile="' + i + "-" + s + '" />'; t.tilesTotal++ } } } } r += "</div>"; t.$image = e(r); t.$tiles = t.$image.find("img"); t.$tiles.each(function (n, r) { var i = e(r); i.one("load", t, p); if (i[0].complete) { i.trigger("load") } }) } else { t.$image = e('<img class="zoomer-image" />'); t.$image.one("load.zoomer", t, d).attr("src", n); if (t.$image[0].complete) { t.$image.trigger("load") } } } function p(e) { var t = e.data; t.tilesLoaded++; if (t.tilesLoaded === t.tilesTotal) { t.tiledRows = t.images[0].length; t.tiledColumns = t.images[0][0].length; t.tiledHeight = t.$tiles.eq(0)[0].naturalHeight * t.tiledRows; t.tiledWidth = t.$tiles.eq(0)[0].naturalWidth * t.tiledColumns; d({ data: t }) } } function d(t) { var n = t.data; if (n.tiled) { n.naturalHeight = n.tiledHeight; n.naturalWidth = n.tiledWidth } else { n.naturalHeight = n.$image[0].naturalHeight; n.naturalWidth = n.$image[0].naturalWidth } if (n.retina) { n.naturalHeight /= 2; n.naturalWidth /= 2 } n.$holder.css({ height: n.naturalHeight, width: n.naturalWidth }); n.targetImageHeight = n.naturalHeight; n.targetImageWidth = n.naturalWidth; n.maxHeight = n.naturalHeight; n.maxWidth = n.naturalWidth; n.imageRatioWide = n.naturalWidth / n.naturalHeight; n.imageRatioTall = n.naturalHeight / n.naturalWidth; if (n.naturalHeight > n.frameHeight - n.marginReal || n.naturalWidth > n.frameWidth - n.marginReal) { n = m(n); n.targetImageHeight = n.minHeight; n.targetImageWidth = n.minWidth } n.positionerLeft = n.targetPositionerLeft = n.centerLeft; n.positionerTop = n.targetPositionerTop = n.centerTop; n.imageLeft = n.targetImageLeft = Math.round(-n.targetImageWidth / 2); n.imageTop = n.targetImageTop = Math.round(-n.targetImageHeight / 2); n.imageHeight = n.targetImageHeight; n.imageWidth = n.targetImageWidth; if (s) { var r = n.imageWidth / n.naturalWidth, i = n.imageHeight / n.naturalHeight; n.$positioner.css(j("transform", "translate3d(" + n.positionerLeft + "px, " + n.positionerTop + "px, 0)")); n.$holder.css(j("transform", "translate3d(-50%, -50%, 0) scale(" + r + "," + i + ")")) } else { n.$positioner.css({ left: n.positionerLeft, top: n.positionerTop }); n.$holder.css({ left: n.imageLeft, top: n.imageTop, height: n.imageHeight, width: n.imageWidth }) } n.$holder.append(n.$image); if (n.tiled) { n.$holder.css({ background: "url(" + n.tiledThumbnail + ") no-repeat left top", backgroundSize: "100% 100%" }); n.tileHeightPercentage = 100 / n.tiledRows; n.tileWidthPercentage = 100 / n.tiledColumns; n.$tiles.css({ height: n.tileHeightPercentage + "%", width: n.tileWidthPercentage + "%" }); n.$tiles.each(function (t, r) { var i = e(r), s = i.data("zoomer-tile").split("-"); i.css({ left: n.tileWidthPercentage * parseInt(s[1], 10) + "%", top: n.tileHeightPercentage * parseInt(s[0], 10) + "%" }) }) } n.$holder.animate({ opacity: 1 }, 300); n.loading = false; if (n.gallery) { v(n) } } function v(t) { if (t.index > 0) { e('<img src="' + t.images[t.index - 1] + '">') } if (t.index < t.images.length - 1) { e('<img src="' + t.images[t.index + 1] + '">') } } function m(e) { if (e.naturalHeight > e.naturalWidth) { e.aspect = "tall"; e.minHeight = Math.round(e.frameHeight - e.marginReal); e.minWidth = Math.round(e.minHeight / e.imageRatioTall); if (e.minWidth > e.frameWidth - e.marginReal) { e.minWidth = Math.round(e.frameWidth - e.marginReal); e.minHeight = Math.round(e.minWidth / e.imageRatioWide) } } else { e.aspect = "wide"; e.minWidth = Math.round(e.frameWidth - e.marginReal); e.minHeight = Math.round(e.minWidth / e.imageRatioWide); if (e.minHeight > e.frameHeight - e.marginReal) { e.minHeight = Math.round(e.frameHeight - e.marginReal); e.minWidth = Math.round(e.minHeight / e.imageRatioTall) } } return e } function g() { for (var e = 0, t = r.length; e < t; e++) { var n = r.eq(e).data("zoomer"); if (typeof n === "object") { n = y(n); n.lastAction = n.action; if (s) { var i = n.imageWidth / n.naturalWidth, o = n.imageHeight / n.naturalHeight; n.$positioner.css(j("transform", "translate3d(" + n.positionerLeft + "px, " + n.positionerTop + "px, 0)")); n.$holder.css(j("transform", "translate3d(-50%, -50%, 0) scale(" + i + "," + o + ")")) } else { n.$positioner.css({ left: n.positionerLeft, top: n.positionerTop }); n.$holder.css({ left: n.imageLeft, top: n.imageTop, width: n.imageWidth, height: n.imageHeight }) } if (n.callback) { n.callback.apply(n.$zoomer, [(n.imageWidth - n.minWidth) / (n.maxWidth - n.minWidth)]) } } } } function y(e) { if (e.action === "zoom_in" || e.action === "zoom_out") { e.keyDownTime += e.increment; var t = (e.action === "zoom_out" ? -1 : 1) * Math.round(e.imageWidth * e.keyDownTime - e.imageWidth); if (e.aspect === "tall") { e.targetImageHeight += t; e.targetImageWidth = Math.round(e.targetImageHeight / e.imageRatioTall) } else { e.targetImageWidth += t; e.targetImageHeight = Math.round(e.targetImageWidth / e.imageRatioWide) } } if (e.aspect === "tall") { if (e.targetImageHeight < e.minHeight) { e.targetImageHeight = e.minHeight; e.targetImageWidth = Math.round(e.targetImageHeight / e.imageRatioTall) } else if (e.targetImageHeight > e.maxHeight) { e.targetImageHeight = e.maxHeight; e.targetImageWidth = Math.round(e.targetImageHeight / e.imageRatioTall) } } else { if (e.targetImageWidth < e.minWidth) { e.targetImageWidth = e.minWidth; e.targetImageHeight = Math.round(e.targetImageWidth / e.imageRatioWide) } else if (e.targetImageWidth > e.maxWidth) { e.targetImageWidth = e.maxWidth; e.targetImageHeight = Math.round(e.targetImageWidth / e.imageRatioWide) } } e.targetImageLeft = Math.round(-e.targetImageWidth * .5); e.targetImageTop = Math.round(-e.targetImageHeight * .5); if (e.action === "drag" || e.action === "pinch") { e.imageWidth = e.targetImageWidth; e.imageHeight = e.targetImageHeight; e.imageLeft = e.targetImageLeft; e.imageTop = e.targetImageTop } else { e.imageWidth += Math.round((e.targetImageWidth - e.imageWidth) * e.enertia); e.imageHeight += Math.round((e.targetImageHeight - e.imageHeight) * e.enertia); e.imageLeft += Math.round((e.targetImageLeft - e.imageLeft) * e.enertia); e.imageTop += Math.round((e.targetImageTop - e.imageTop) * e.enertia) } e.boundsLeft = Math.round(e.frameWidth - e.targetImageWidth * .5 - e.marginMax); e.boundsRight = Math.round(e.targetImageWidth * .5 + e.marginMax); e.boundsTop = Math.round(e.frameHeight - e.targetImageHeight * .5 - e.marginMax); e.boundsBottom = Math.round(e.targetImageHeight * .5 + e.marginMax); if (e.targetPositionerLeft < e.boundsLeft) { e.targetPositionerLeft = e.boundsLeft } if (e.targetPositionerLeft > e.boundsRight) { e.targetPositionerLeft = e.boundsRight } if (e.targetPositionerTop < e.boundsTop) { e.targetPositionerTop = e.boundsTop } if (e.targetPositionerTop > e.boundsBottom) { e.targetPositionerTop = e.boundsBottom } if (e.zoomPositionTop > 0 && e.zoomPositionLeft > 0) { e.targetPositionerLeft = e.centerLeft - e.targetImageLeft - e.targetImageWidth * e.zoomPositionLeft; e.targetPositionerTop = e.centerTop - e.targetImageTop - e.targetImageHeight * e.zoomPositionTop } if (e.action !== "pinch") { if (e.targetImageWidth < e.frameWidth) { e.targetPositionerLeft = e.centerLeft } if (e.targetImageHeight < e.frameHeight) { e.targetPositionerTop = e.centerTop } } if (e.action === "drag" || e.action === "pinch") { e.positionerLeft = e.targetPositionerLeft; e.positionerTop = e.targetPositionerTop } else { e.positionerLeft += Math.round((e.targetPositionerLeft - e.positionerLeft) * e.enertia); e.positionerTop += Math.round((e.targetPositionerTop - e.positionerTop) * e.enertia) } e.oldImageWidth = e.imageWidth; e.oldImageHeight = e.imageHeight; return e } function b(e) { var t = e.data; if (!t.loading && t.index + 1 < t.images.length) { t.index++; c.apply(t.$target, [t]) } } function w(e) { var t = e.data; if (!t.loading && t.index - 1 >= 0) { t.index--; c.apply(t.$target, [t]) } } function E(e) { e.preventDefault(); e.stopPropagation(); var t = e.data; t = T(t); t.keyDownTime = 1; t.action = "zoom_in" } function S(e) { e.preventDefault(); e.stopPropagation(); var t = e.data; t = T(t); t.keyDownTime = 1; t.action = "zoom_out" } function x(e) { e.preventDefault(); e.stopPropagation(); var t = e.data; t = N(t); t.keyDownTime = 0; t.action = "" } function T(e, t, n) { t = t || e.imageWidth * .5; n = n || e.imageHeight * .5; e.zoomPositionLeft = (t - (e.positionerLeft - e.centerLeft)) / e.imageWidth; e.zoomPositionTop = (n - (e.positionerTop - e.centerTop)) / e.imageHeight; return e } function N(e) { e.zoomPositionTop = 0; e.zoomPositionLeft = 0; return e } function C(e) { if (e.preventDefault) { e.preventDefault(); e.stopPropagation() } var t = e.data; t.action = "drag"; t.mouseX = e.pageX; t.mouseY = e.pageY; t.targetPositionerLeft = t.positionerLeft; t.targetPositionerTop = t.positionerTop; n.on("mousemove.zoomer", t, k).on("mouseup.zoomer", t, L) } function k(e) { if (e.preventDefault) { e.preventDefault(); e.stopPropagation() } var t = e.data; if (e.pageX && e.pageY) { t.targetPositionerLeft -= Math.round(t.mouseX - e.pageX); t.targetPositionerTop -= Math.round(t.mouseY - e.pageY); t.mouseX = e.pageX; t.mouseY = e.pageY } } function L(e) { if (e.preventDefault) { e.preventDefault(); e.stopPropagation() } var t = e.data; t.action = ""; n.off("mousemove.zoomer mouseup.zoomer") } function A(t) { if (e(t.target).parent(".zoomer-controls").length > 0) { return } if (t.preventManipulation) { t.preventManipulation() } t.preventDefault(); t.stopPropagation(); var n = t.data, r = t.originalEvent; if (r.type.match(/(up|end)$/i)) { _(n, r); return } if (r.pointerId) { var i = false; for (var s in n.touches) { if (n.touches[s].identifier === r.pointerId) { i = true; n.touches[s].pageX = r.clientX; n.touches[s].pageY = r.clientY } } if (!i) { n.touches.push({ identifier: r.pointerId, pageX: r.clientX, pageY: r.clientY }) } } else { n.touches = r.touches } if (r.type.match(/(down|start)$/i)) { O(n) } else if (r.type.match(/move$/i)) { M(n) } } function O(e) { if (!e.touchEventsBound) { e.touchEventsBound = true; n.on("touchmove.zoomer MSPointerMove.zoomer", e, A).on("touchend.zoomer MSPointerUp.zoomer", e, A) } e.zoomPercentage = 1; if (e.touches.length >= 2) { e.offset = e.$zoomer.offset(); e.pinchStartX0 = e.touches[0].pageX - e.offset.left; e.pinchStartY0 = e.touches[0].pageY - e.offset.top; e.pinchStartX1 = e.touches[1].pageX - e.offset.left; e.pinchStartY1 = e.touches[1].pageY - e.offset.top; e.pinchStartX = (e.pinchStartX0 + e.pinchStartX1) / 2; e.pinchStartY = (e.pinchStartY0 + e.pinchStartY1) / 2; e.imageWidthStart = e.imageWidth; e.imageHeightStart = e.imageHeight; T(e); e.pinchDeltaStart = Math.sqrt(Math.pow(e.pinchStartX1 - e.pinchStartX0, 2) + Math.pow(e.pinchStartY1 - e.pinchStartY0, 2)) } e.mouseX = e.touches[0].pageX; e.mouseY = e.touches[0].pageY } function M(e) { if (e.touches.length === 1) { e.action = "drag"; e.targetPositionerLeft -= e.mouseX - e.touches[0].pageX; e.targetPositionerTop -= e.mouseY - e.touches[0].pageY } else if (e.touches.length >= 2) { e.action = "pinch"; e.pinchEndX0 = e.touches[0].pageX - e.offset.left; e.pinchEndY0 = e.touches[0].pageY - e.offset.top; e.pinchEndX1 = e.touches[1].pageX - e.offset.left; e.pinchEndY1 = e.touches[1].pageY - e.offset.top; if (e.pinchEndX0 !== e.lastPinchEndX0 || e.pinchEndY0 !== e.lastPinchEndY0 || e.pinchEndX1 !== e.lastPinchEndX1 || e.pinchEndY1 !== e.lastPinchEndY1) { e.pinchDeltaEnd = Math.sqrt(Math.pow(e.pinchEndX1 - e.pinchEndX0, 2) + Math.pow(e.pinchEndY1 - e.pinchEndY0, 2)); e.zoomPercentage = e.pinchDeltaEnd / e.pinchDeltaStart; e.targetImageWidth = Math.round(e.imageWidthStart * e.zoomPercentage); e.targetImageHeight = Math.round(e.imageHeightStart * e.zoomPercentage); e.pinchEndX = (e.pinchEndX0 + e.pinchEndX1) / 2; e.pinchEndY = (e.pinchEndY0 + e.pinchEndY1) / 2; e.lastPinchEndX0 = e.pinchEndX0; e.lastPinchEndY0 = e.pinchEndY0; e.lastPinchEndX1 = e.pinchEndX1; e.lastPinchEndY1 = e.pinchEndY1 } } e.mouseX = e.touches[0].pageX; e.mouseY = e.touches[0].pageY } function _(e, t) { e.action = ""; e.lastPinchEndX0 = e.pinchEndX0 = e.pinchStartX0 = 0; e.lastPinchEndY0 = e.pinchEndY0 = e.pinchStartY0 = 0; e.lastPinchEndX1 = e.pinchEndX1 = e.pinchStartX1 = 0; e.lastPinchEndY1 = e.pinchEndY1 = e.pinchStartY1 = 0; e.pinchStartX = e.pinchEndX = 0; e.pinchStartY = e.pinchEndX = 0; N(e); if (t.pointerId) { for (var r in e.touches) { if (e.touches[r].identifier === t.pointerId) { e.touches.splice(r, 1) } } } n.off(".zoomer"); e.touchEventsBound = false } function D(e) { e.tiled = false; e.gallery = false; if (typeof e.source === "string") { e.images = [e.source] } else { if (typeof e.source[0] === "string") { e.images = e.source; if (e.images.length > 1) { e.gallery = true } } else { e.tiledThumbnail = e.source.thumbnail; e.images = [e.source.tiles]; e.tiled = true } } return e } function P() { if (!i) { i = true; B() } } function H() { i = false } function B() { if (i) { t.requestAnimationFrame(B); g() } } function j(e, t) { var n = {}; n["-webkit-" + e] = t; n["-moz-" + e] = t; n["-ms-" + e] = t; n["-o-" + e] = t; n[e] = t; return n } function F() { var t = "transform", n = "translate3d(0px, 0px, 0px)", r = /translate3d\(0px, 0px, 0px\)/g, i = e("<div>"); i.css(j(t, n)); var s = i[0].style.cssText.match(r); return s !== null && s.length === 1 } var n = e(t), r, i = false, s = false; var o = { callback: e.noop, controls: { position: "bottom", zoomIn: null, zoomOut: null, next: null, previous: null }, customClass: "", enertia: .2, increment: .01, marginMin: 30, marginMax: 100, retina: false, source: null }; var u = { images: [], aspect: "", action: "", lastAction: "", keyDownTime: 0, marginReal: 0, originalDOM: "", gallery: false, index: 0, $tiles: null, tiled: false, tilesTotal: 0, tilesLoaded: 0, tiledColumns: 0, tiledRows: 0, tiledHeight: 0, tiledWidth: 0, tiledThumbnail: null, centerLeft: 0, centerTop: 0, frameHeight: 0, frameWidth: 0, naturalHeight: 0, naturalWidth: 0, imageRatioWide: 0, imageRatioTall: 0, minHeight: null, minWidth: null, maxHeight: 0, maxWidth: 0, boundsTop: 0, boundsBottom: 0, boundsLeft: 0, boundsRight: 0, imageWidth: 0, imageHeight: 0, imageLeft: 0, imageTop: 0, targetImageWidth: 0, targetImageHeight: 0, targetImageLeft: 0, targetImageTop: 0, oldImageWidth: 0, oldImageHeight: 0, positionerLeft: 0, positionerTop: 0, targetPositionerLeft: 0, targetPositionerTop: 0, zoomPositionLeft: 0, zoomPositionTop: 0, offset: null, touches: [], zoomPercentage: 1, pinchStartX0: 0, pinchStartX1: 0, pinchStartY0: 0, pinchStartY1: 0, pinchEndX0: 0, pinchEndX1: 0, pinchEndY0: 0, pinchEndY1: 0, lastPinchEndX0: 0, lastPinchEndY0: 0, lastPinchEndX1: 0, lastPinchEndY1: 0, pinchDeltaStart: 0, pinchDeltaEnd: 0 }; var a = { defaults: function (t) { o = e.extend(o, t || {}); return e(this) }, destroy: function () { var t = e(this).each(function (t, r) { var i = e(r).data("zoomer"); if (i) { n.off(".zoomer"); i.$holder.off(".zoomer"); i.$zoomer.off(".zoomer"); i.controls.$zoomIn.off(".zoomer"); i.controls.$zoomOut.off(".zoomer"); i.controls.$next.off(".zoomer"); i.controls.$previous.off(".zoomer"); i.$target.removeClass("zoomer-element").data("zoomer", null).empty().append(i.originalDOM) } }); r = e(".zoomer-element"); if (r.length < 1) { H() } return t }, load: function (t) { return e(this).each(function (n, r) { var i = e(r).data("zoomer"); if (i) { i.source = t; i.index = 0; i = D(i); c(i) } }) }, pan: function (t, n) { return e(this).each(function (r, i) { var s = e(i).data("zoomer"); if (s) { t /= 100; n /= 100; s.targetPositionerLeft = Math.round(s.centerLeft - s.targetImageLeft - s.targetImageWidth * t); s.targetPositionerTop = Math.round(s.centerTop - s.targetImageTop - s.targetImageHeight * n) } }) }, resize: function () { return e(this).each(function (t, n) { var r = e(n).data("zoomer"); if (r) { r.frameWidth = r.$target.outerWidth(); r.frameHeight = r.$target.outerHeight(); r.centerLeft = Math.round(r.frameWidth * .5); r.centerTop = Math.round(r.frameHeight * .5); r = m(r) } }) }, unload: function () { return e(this).each(function () { var t = e(this).data("zoomer"); if (t && typeof t.$image !== "undefined") { t.$image.remove() } }) } }; e.fn.zoomer = function (e) { if (a[e]) { return a[e].apply(this, Array.prototype.slice.call(arguments, 1)) } else if (typeof e === "object" || !e) { return f.apply(this, arguments) } return this }; e.zoomer = function (e) { if (e === "defaults") { a.defaults.apply(this, Array.prototype.slice.call(arguments, 1)) } } })(jQuery, window)